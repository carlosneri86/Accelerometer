/*HEADER******************************************************************************************
*
* Comments:
*
*
**END********************************************************************************************/
#ifndef I2C_H_
#define I2C_H_


///////////////////////////////////////////////////////////////////////////////////////////////////
//                                      Includes Section                                         
///////////////////////////////////////////////////////////////////////////////////////////////////
#include <stdint.h>
///////////////////////////////////////////////////////////////////////////////////////////////////
//                                  Defines & Macros Section                                     
///////////////////////////////////////////////////////////////////////////////////////////////////
//! I2C status
enum eI2CStatus
{
	I2C_FRAME_IN_PROGRESS = 0,
	I2C_NAK_RECEIVED
};
//! I2C return Codes
enum eI2CReturnCodes
{
	I2C_OK = 0,
	I2C_BUSY
};
//! I2C available on the SoC
enum eI2C
{
	I2C0 = 0,
	I2C1,
	MAX_I2C
};
//! Macro used to poll the status register
#define I2C_CHECK_STATUS(X)	(I2C_gdwDriverStatus&(1<<X))
//! Macro used to set specific status
#define I2C_SET_STATUS(X)	(I2C_gdwDriverStatus |= (1<<X))
//! Macro used to clear specific status
#define I2C_CLEAR_STATUS(X)	(I2C_gdwDriverStatus &=~ (1<<X))
///////////////////////////////////////////////////////////////////////////////////////////////////
//                                      Typedef Section                                          
///////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////
//                                Function-like Macros Section                                   
///////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////
//                                  Extern Constants Section                                     
///////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////
//                                  Extern Variables Section                                     
///////////////////////////////////////////////////////////////////////////////////////////////////
//! Driver status register
extern uint32_t I2C_gdwDriverStatus;
///////////////////////////////////////////////////////////////////////////////////////////////////
//                                Function Prototypes Section                                    
///////////////////////////////////////////////////////////////////////////////////////////////////

#if defined(__cplusplus)
extern "C" {
#endif // __cplusplus
/*!
 *	@brief	Enables the specified I2C module
 * 
 *	@param	bModuleToEnable		[in]	I2C module to enable
 * 	
 * 	@return	void								
 *	
*/
void I2C_vfnInitialization(uint8_t bModuleToEnable);

uint8_t I2C_bfnTxBuffer(uint8_t bModuleToUse, uint8_t bSalveAddress, uint8_t * pbDataBuffer, uint8_t bDataSize);

uint8_t I2C_bfnRxBuffer(uint8_t bModuleToUse, uint8_t bSalveAddress, uint8_t * pbDataBuffer, uint8_t bDataSize);

uint8_t I2C_bfnTxRxBuffer(uint8_t bModuleToUse, uint8_t bSalveAddress, uint8_t * pbDataBufferOut, uint8_t bDataOutSize, uint8_t * pbDataBufferIn, uint8_t bDataInSize);

#if defined(__cplusplus)
}
#endif // __cplusplus


#endif 
///////////////////////////////////////////////////////////////////////////////////////////////////
// EOF
///////////////////////////////////////////////////////////////////////////////////////////////////
